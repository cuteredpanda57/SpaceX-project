# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                dcc.Dropdown(id='site-dropdown',options=[{'label': 'All Sites', 'value': 'ALL'}] + 
                                [{'label': site, 'value': site} for site in spacex_df['Launch Site'].unique()],
                                value='ALL',  # Default value
                                placeholder="Select a Launch Site here",
                                searchable=True
                                ),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                dcc.RangeSlider(
                                    id='payload-slider',
                                    min=0,
                                    max=10000,
                                    step=1000,
                                    marks={i: f'{i}' for i in range(0, 10001, 1000)},  # Dynamic marks for each step (0, 1000, ..., 10000)
                                    value=[min_payload, max_payload]  # Set default value range based on dataset min and max payload
                                ),
    
                                html.Br(),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    # If "All Sites" is selected
    if entered_site == 'ALL':
        # Group the data by Launch Site and class, then count the number of occurrences of each class (success/failure) per site
        pie_data = spacex_df.groupby(['Launch Site', 'class']).size().reset_index(name='count')
        
        # Create a pie chart for success and failure distribution per site
        fig = px.pie(pie_data, values='count', names='Launch Site', 
                     color='Launch Site',  # Different colors for each site
                     title='Launch Success vs. Failure per Site')
    
    else:
        # If a specific site is selected, filter the dataframe for that site
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        
        # Group the filtered data by class (success/failure) to show the count of successes and failures
        pie_data = filtered_df.groupby('class').size().reset_index(name='count')
        
        # Create a pie chart for success vs failure at the selected site
        fig = px.pie(pie_data, values='count', names='class', 
                     title=f'Launch Success vs. Failure for {entered_site}')
    
    return fig
# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def update_scatter_chart(entered_site, payload_range):
    # Unpack the payload range
    min_payload, max_payload = payload_range
    
    # Filter the dataframe based on the selected payload range
    filtered_df = spacex_df[(spacex_df['Payload Mass (kg)'] >= min_payload) & 
                            (spacex_df['Payload Mass (kg)'] <= max_payload)]
    
    # If a specific site is selected, filter by site as well
    if entered_site != 'ALL':
        filtered_df = filtered_df[filtered_df['Launch Site'] == entered_site]
    
    # Create the scatter plot with Payload Mass (kg) on the x-axis, Launch Success (class) on the y-axis
    # Color the points by Booster Version Category
    fig = px.scatter(
        filtered_df, 
        x='Payload Mass (kg)', 
        y='class', 
        color='Booster Version Category',  # Color points by Booster Version
        title=f"Payload vs. Success for {entered_site if entered_site != 'ALL' else 'All Sites'}",
        labels={'class': 'Launch Outcome (0 = Failure, 1 = Success)', 'Payload Mass (kg)': 'Payload Mass (kg)'}
    )
    
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server()
